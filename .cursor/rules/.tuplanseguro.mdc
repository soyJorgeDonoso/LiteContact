# Prompt base ‚Äî Proyecto "Tu Plan Seguro"

Debes trabajar en el proyecto **Tu Plan Seguro**, construido en **PHP + MySQL**, con frontend en **HTML5, CSS3, JS nativo y Bootstrap 5**.  

‚ö†Ô∏è **Muy importante**:  
- Siempre aplica las reglas del proyecto (estructura, estilo, librer√≠as permitidas, buenas pr√°cticas).  
- Entrega el **archivo completo**, no fragmentos.  
- Puedes modificar **base de datos, backend y frontend** en una misma tarea.  
- **No pidas confirmaci√≥n**: ejecuta directamente las instrucciones, salvo que la solicitud sea ambigua.  
- El resultado debe ser **seguro, responsivo y sin errores PHP**.  

---

## Reglas clave a respetar
1. **DB**:  
   - Tablas m√≠nimas: `contact_status`, `contact_history`, `reminder_settings`.  
   - `contact_status` debe almacenar datos completos del contacto + estado + fecha l√≠mite.  
   - `contact_history` guarda cada cambio de estado con nota.  
   - `reminder_settings` define plazos de alarmas (3 d√≠as, 1 d√≠a, 2 horas).  

2. **Backend (PHP + PDO)**:  
   - Prepared statements siempre.  
   - Validar y sanitizar inputs.  
   - Guardar logs de errores, no mostrarlos en producci√≥n.  
   - Manejo de sesiones para administraci√≥n.  

3. **Frontend (HTML + Bootstrap 5)**:  
   - Interfaz moderna y responsiva.  
   - Bootstrap para tablas, formularios, modales, badges, paginaci√≥n.  
   - FontAwesome para √≠conos.  
   - SweetAlert2 para confirmaciones y notificaciones.  
   - flatpickr/Tempus Dominus para seleccionar fecha/hora en `deadline_at`.  
   - Timeline para historial de gesti√≥n (`contact_history`).  

4. **Gesti√≥n de contactos**:  
   - Estados admitidos: Nuevo, En proceso, Pospuesto, Pendiente de respuesta, Contactado, Convertido, No interesado, Datos inv√°lidos, Duplicado, Archivado.  
   - Cada cambio de estado requiere nota ‚Üí guardar en `contact_history`.  
   - Alarmas autom√°ticas (3d, 1d, 2h) antes del deadline, configurables en `reminder_settings`.  
   - Alarmas visibles en UI:  
     - Rojo = vencido.  
     - Amarillo = pr√≥ximas.  
   - Campana üîî en header con contador de alertas.  

5. **Buenas pr√°cticas**:  
   - C√≥digo limpio, legible e indentado.  
   - Im√°genes con `loading="lazy"`.  
   - Sin CLS (layout shifts) en Lighthouse.  
   - Accesible (`aria-*`, `role`, labels correctos).  

---

## Resultado esperado
- C√≥digo entregado **listo para usar en producci√≥n**.  
- Archivos completos (PHP, HTML, CSS, JS) seg√∫n lo que se solicite.  
- Cambios en DB reflejados con `ALTER TABLE` o `CREATE TABLE`.  
- Interfaz moderna, responsiva y funcional.  
- Sin errores ni notices de PHP.  
